#include <GL/freeglut.h>
#include <math.h>


//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
//绘制直线 
void DrawLine(float X_Start, float Y_Start, float Z_Start, float LineWidth, int Color[3], float X_End, float Y_End, float Z_End){
     glLineWidth(LineWidth);  //设定线宽 
     glColor3ub(Color[0],Color[1],Color[2]);    //设置画笔的颜色  
     glBegin(GL_LINES);     
       glVertex3f(X_Start, Y_Start, Z_Start);    //直线起始坐标 
       glVertex3f(X_End, Y_End, Z_End);          //直线结束坐标
     glEnd();
}
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
//绘制三角形
void DrawTriangle(float *VertexA, float *VertexB, float *VertexC){
	glBegin(GL_TRIANGLES);
    	glVertex3f(VertexA[0], VertexA[1], VertexA[2]);
    	glVertex3f(VertexB[0], VertexB[1], VertexB[2]);
    	glVertex3f(VertexC[0], VertexC[1], VertexC[2]);
	glEnd();
}	
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
//绘制点 
void DrawSpot(float X, float Y, float Z, float LineWidth, float Color[]){
     glPointSize(LineWidth); //设定点大小 
     glColor3f(Color[0], Color[1], Color[2]); 
     glBegin(GL_POINTS);     
       glVertex3f(X, Y, Z);  //直线起始坐标 
     glEnd();
}
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
/*绘制四边形
  VertexX0,VertexY0:第 1 个顶点 XY 坐标 
  VertexX1,VertexY1:第 2 个顶点 XY 坐标 
  VertexX2,VertexY2:第 3 个顶点 XY 坐标 
  VertexX3,VertexY3:第 4 个顶点 XY 坐标 
 */
void DrawPolygon(float VertexX0,float VertexY0,float VertexX1,float VertexY1,float VertexX2,float VertexY2,float VertexX3,float VertexY3,int Color[3]){
     
  glBegin(GL_POLYGON);  
        glColor3ub(Color[0],Color[1],Color[2]);    //设置画笔的颜色
        glVertex2f(VertexX0,VertexY0);  
        glVertex2f(VertexX1,VertexY1);  
        glVertex2f(VertexX2,VertexY2);  
        glVertex2f(VertexX3,VertexY3);  
  glEnd(); 
}
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
//坐标法线 
void CoordinateLine(float CoordinateLineLength){
     glLineWidth(3);  //设定线宽 
     glColor3f(210.0/255.0,105.0/255.0,30.0/255.0);    //设置画笔的颜色 
     //=========================================================================X
     glBegin(GL_LINES);     
       glVertex3f(CoordinateLineLength, 0, 0);    //直线起始坐标 
       glVertex3f(0, 0, 0);     //直线结束坐标
     glEnd();
     
     glLineWidth(1);            //设定线宽 
     glColor3ub(210,105,30);    //设置画笔的颜色 
     glBegin(GL_LINES);     
       glVertex3f(0, 0, 0);     //直线起始坐标 
       glVertex3f(-CoordinateLineLength, 0, 0);   //直线结束坐标
     glEnd();
     //=========================================================================Y
     glLineWidth(3);            //设定线宽 
     glColor3ub(210,105,30);    //设置画笔的颜色 
     glBegin(GL_LINES);     
       glVertex3f(0, CoordinateLineLength, 0);    //直线起始坐标 
       glVertex3f(0, 0, 0);     //直线结束坐标
     glEnd();
         
     glLineWidth(1);            //设定线宽 
     glColor3ub(210,105,30);    //设置画笔的颜色 
     glBegin(GL_LINES);     
       glVertex3f(0, 0, 0);     //直线起始坐标 
       glVertex3f(0, -CoordinateLineLength, 0);   //直线结束坐标
     glEnd(); 
     //=========================================================================Z
     glLineWidth(3);            //设定线宽 
     glColor3ub(210,105,30);    //设置画笔的颜色 
     glBegin(GL_LINES);     
       glVertex3f(0, 0, CoordinateLineLength);    //直线起始坐标 
       glVertex3f(0, 0, 0);     //直线结束坐标
     glEnd();   
     
     glLineWidth(1);            //设定线宽 
     glColor3ub(210,105,30);    //设置画笔的颜色 
     glBegin(GL_LINES);     
       glVertex3f(0, 0, 0);     //直线起始坐标 
       glVertex3f(0, 0, -CoordinateLineLength);   //直线结束坐标
     glEnd();        
}
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
/*
  X: 圆心的 X 起点 
  Y: 圆心的 Y 起点  
  n: 圆的圆度值 
  R: 圆的半径   
 */
void arc(float X, float Y, int n, float R){
    double PI = 3.1415926536f;
    float x[n];
    float y[n]; 
    for (int i = 0; i < n; i++){
        x[i] = R * cos(2 * PI / n * i);
        y[i] = R * sin(2 * PI / n * i);
    } 
    int i = 0;
    glBegin(GL_LINE_STRIP);    //表示对以下画出的点进行的操作,这里是形成多边形,类似的还有GL_LINE_STRIP,GL_LINE_LOOP,GL_POINT等 
        for (i; i < n; i++) {  //通过数学计算来画多边形的点        
            glVertex3f(X + x[i], Y + y[i], 0.0f);                   
        }
        glVertex3f(X + R, Y, 0.0f); 
    glEnd();
} 
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
/*
 *x: X 的顶点坐标数组 
 *y: Y 的顶点坐标数组 
 VertexNumber: 顶点坐标数组的长度                                               
 */
void DrawArc(float *x, float *y, int VertexNumber, float z, int Color[3]){
    glColor3ub(Color[0],Color[1],Color[2]);    //设置画笔的颜色   
    glBegin(GL_LINE_STRIP);  //表示对以下画出的点进行的操作,这里是形成多边形,类似的还有GL_LINE_STRIP,GL_LINE_LOOP,GL_POINT等 
        for (int i = 0; i < VertexNumber; i++) {       //通过数学计算来画多边形的点        
            glVertex3f(x[i], y[i], z);                   
        }
    glEnd();      
}
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================
//==========================================================================================================================




